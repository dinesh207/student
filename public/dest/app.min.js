/* ========================================================= 
! Instatutor - v0.0.1 - 2016-10-31 
Copyright (c) 2016 
========================================================= */
angular.module("mainApp",["ngResource","ngCookies","ui.router","ui.bootstrap","ui.bootstrap.datetimepicker","ngMaterial","ngToast","angular-loading-bar"]),angular.module("mainApp").config(["$stateProvider","$locationProvider","$httpProvider","ngToastProvider",function($stateProvider,$locationProvider,$httpProvider,ngToast){$httpProvider.interceptors.push(function($q,$cookies){return{request:function(config){return $cookies.getObject("session")&&""!==$cookies.getObject("session")&&(config.headers["x-access-token"]=$cookies.getObject("session").token),config.headers["Content-Type"]="application/json",config}}}),ngToast.configure({verticalPosition:"top",horizontalPosition:"center"}),$stateProvider.state("app",{url:"",templateUrl:"app/app.html"}).state("studentRegister",{url:"/student/register",templateUrl:"app/components/student/student-register.html",controller:"studentController"}).state("tutorRegister",{url:"/tutor/register",templateUrl:"app/components/tutor/tutor.html",controller:"tutorController"}).state("studentLogin",{url:"/student/login",templateUrl:"app/components/login/student-login.html",controller:"studentLoginController"}).state("tutorLogin",{url:"/tutor/login",templateUrl:"app/components/login/tutor-login.html",controller:"tutorLoginController"}).state("dashboard",{abstract:!0,url:"/student",templateUrl:"app/components/dashboard/dashboard.html",controller:"dashboardController"}).state("dashboard.student",{url:"",templateUrl:"app/components/dashboard/student/student-dashboard.html",controller:"studentDashboardController"}).state("dashboard.studentSchedules",{url:"/student/schedules",templateUrl:"app/components/dashboard/schedules/student-schedules.html",controller:"studentSchedulesController"}).state("dashboardTutor",{abstract:!0,url:"/tutor",templateUrl:"app/components/tutor-dashboard/tutor.dashboard.html",controller:"tutorDashboardController"}).state("dashboardTutor.tutorHome",{url:"",templateUrl:"app/components/tutor-dashboard/home/tutor.home.html",controller:"tutorHome"}).state("dashboardTutor.tutorSchedules",{url:"/schedules",templateUrl:"app/components/tutor-dashboard/schedules/tutor.schedules.html",controller:"tutorSchedulesController"})}]),angular.module("mainApp").run(["$location","$rootScope","$state","AuthService","access",function($location,$rootScope,$state,AuthService,access){$rootScope.$state=$state,$rootScope.$on("$stateChangeStart",function(e,toState,toParams,fromState,fromParams){var checkLogin=AuthService.isAuthenticated();toState.authenticate&&!checkLogin&&(window.location.href=window.location.origin,event.preventDefault())})}]),angular.module("mainApp").service("AuthService",["$cookies","$http","$q","$rootScope",function($cookies,$http,$q,$rootScope){return{login:function(url,data){var deferred=$q.defer(),url=url,data=data;return $http.post(url,data).then(function(response){deferred.resolve(response)},function(response){deferred.reject(response)}),deferred.promise},isAuthenticated:function(){var authenticate;if($cookies.getObject("session")&&""!==$cookies.getObject("session")){var session=$cookies.getObject("session");authenticate=!(!session.token||null==session.token)}return authenticate},updatePassword:function(url,oldPassword,newPassword){var deferred=$q.defer(),url=url,data={oldPassword:oldPassword,newPassword:newPassword};return $http.post(url,data).then(function(response){deferred.resolve(response)},function(response){deferred.reject(response)}),deferred.promise},getLogin:function(){return $cookies.getObject("session")},getNameToDisplay:function(){var name=$cookies.getObject("session");return name&&name.displayName&&""!==name.displayName?name.displayName:name.username}}}]),angular.module("mainApp").service("access",["$uibModal",function($uibModal){return{success:function(){var giveAccess;return $uibModal.open({animation:!0,ariaLabelledBy:"modal-title",ariaDescribedBy:"modal-body",template:'<div class="media eula-modal"><div class="media-header"><a class="pull-right" href="" ng-click="$dismiss()"><i class="fa fa-times"></i></a><h4 class="eula-header">Please enter your access PIN</h4></div><div class="media-body"><input type="number" ng-model="pin" required/></div><div class="media-footer"><span class="pull-right"><button class="btn btn-primary" ng-click="eulaAccepted()">Submit</button><button class="btn btn-default" ng-click="eulaDenied()">I dont have one</button><span></div></div>',controller:function($scope,$uibModalInstance){$scope.eulaAccepted=function(){giveAccess=!0},$scope.eulaDenied=function(){$uibModalInstance.dismiss("cancel"),alert("Please Accept Terms to Continue Login"),giveAccess=!1}}}),giveAccess}}}]),angular.module("mainApp").service("student",["$q","$http",function($q,$http){var upcommingSchedules;return{register:function(student){var defferd=$q.defer(),url="/api/register/student",data=student;return $http.post(url,data).then(function(response){response?defferd.resolve(response):defferd.resolve([])},function(response){defferd.reject(response)}),defferd.promise},getAvailableTutors:function(subjects){var defferd=$q.defer(),url="/student/findTutors/"+subjects;return $http.get(url).then(function(response){response&&defferd.resolve(response)},function(response){defferd.reject(response)}),defferd.promise},getSchedules:function(){var defferd=$q.defer(),url="/student/getUpcomingSchedules";return upcommingSchedules&&upcommingSchedules.data&&upcommingSchedules.data.content.length>0?(console.log("searching form cache"),defferd.resolve(upcommingSchedules)):$http.get(url).then(function(response){console.log("searching form backend"),upcommingSchedules=response,defferd.resolve(upcommingSchedules)},function(response){defferd.reject(response)}),defferd.promise},giveRating:function(tutor,rating,review){var defferd=$q.defer(),url="/student/tutorRating",data={tutorId:tutor,rating:rating,review:review};return $http.post(url,data).then(function(response){response&&defferd.resolve(response)},function(response){defferd.reject(response)}),defferd.promise},confirmTutoring:function(confirm,id){var defferd=$q.defer(),url="/student/confirmTutoring",data={scheduleId:id,confirm:confirm};return $http.post(url,data).then(function(response){response&&defferd.resolve(response)},function(response){defferd.reject(response)}),defferd.promise},bookTutor:function(slotTime,tutorId,message,subjects){var defferd=$q.defer(),url="/student/bookTutor",data={tutorId:tutorId,subjects:subjects,slotTime:slotTime,message:message};return $http.post(url,data).then(function(response){response&&defferd.resolve(response)},function(response){defferd.reject(response)}),defferd.promise}}}]),angular.module("mainApp").service("tutor",["$q","$http",function($q,$http){return{register:function(tutor){var defferd=$q.defer(),url="/api/register/tutor",data=tutor;return $http.post(url,data).then(function(response){response?defferd.resolve(response):defferd.resolve([])},function(response){defferd.reject(response)}),defferd.promise},getAvailability:function(){var defferd=$q.defer(),url="/tutor/getAvailability";return $http.get(url).then(function(response){response&&defferd.resolve(response)},function(response){defferd.reject(response)}),defferd.promise},updateAvailability:function(availability){var defferd=$q.defer(),url="/tutor/updateAvailability",data={availability:availability};return $http.post(url,data).then(function(response){response&&defferd.resolve(response)},function(response){defferd.reject(response)}),defferd.promise},getSchedulesToConfirm:function(){var defferd=$q.defer(),url="/tutor/schedulesToConfirm";return $http.get(url).then(function(response){defferd.resolve(response)},function(response){defferd.reject(response)}),defferd.promise},getSchedules:function(){var defferd=$q.defer(),url="/tutor/getUpcomingSchedules";return $http.get(url).then(function(response){defferd.resolve(response)},function(response){defferd.reject(response)}),defferd.promise},removeAvailability:function(availability){var defferd=$q.defer(),url="/tutor/removeAvailability",data={removeAvailability:{available:availability,isawaiting:!1}};return $http.post(url,data).then(function(response){defferd.resolve(response)},function(response){defferd.reject(response)}),defferd.promise},confirmOrReject:function(id,confirm,reject,name,email){var defferd=$q.defer(),url="/tutor/confirmBooking",data={id:id,confirmBooking:confirm,rejectBooking:reject,studentName:name,studentEmail:email};return $http.post(url,data).then(function(response){defferd.resolve(response)},function(response){defferd.reject(response)}),defferd.promise}}}]),angular.module("mainApp").controller("dashboardController",["$scope","$state","AuthService","$cookies",function($scope,$state,AuthService,$cookies){$scope.displayName=AuthService.getNameToDisplay(),$scope.logout=function(){$cookies.remove("session"),window.location.href="/"},$scope.oldPasswordCheck=!1,$scope.violationCheck,$scope.passCheck=function(value){var element=$("#newPassword1");value?value.match(/[a-z]/)&&(value.match(/[A-Z]/)||value.match(/\d/))&&value.length>=8?(element.removeClass("error").addClass("validClass"),$scope.violationCheck=!1):(element.removeClass("validClass").addClass("error"),$scope.violationCheck=!0):element.removeClass("validClass")},$scope.$watch("newpass2",function(newValue,oldValue){newValue&&null!=newValue&&null!=$scope.newpass1?($scope.pwcheck=newValue===$scope.newpass1,$scope.changePasswordForm.$setValidity("pwmatch",$scope.pwcheck),$scope.pwcheck?$("#newPassword2").removeClass("error").addClass("validClass"):$("#newPassword2").addClass("error").removeClass("validClass")):($("#newPassword2").removeClass("validClass error"),$scope.changePasswordForm.$setValidity("pwmatch",!0))}),$scope.changePassword=function(){if(null==$scope.newpass1||null==$scope.newpass2||null==$scope.oldpass)return $("#oldPassword").addClass("error"),$("#newPassword1").addClass("error"),void $("#newPassword2").addClass("error");if(1==!$scope.violationCheck){var url="/student/changePassword";AuthService.updatePassword(url,$scope.oldpass,$scope.newpass1).then(function(data){$("#changePassword").modal("hide"),alert("Please login with new password"),$scope.logout(),$scope.clearFields()},function(data){console.log(data),$scope.oldPasswordCheck=!0,$("#oldPassword").removeClass("validClass").addClass("error")})}},$scope.clearFields=function(){$scope.newpass1="",$scope.newpass2="",$scope.oldpass="",$scope.violationCheck=!1,$scope.oldPasswordCheck=!1,$("#newPassword1").removeClass("validClass").removeClass("error"),$("#oldPassword").removeClass("validClass").removeClass("error")}}]),angular.module("dashboardApp",["ngResource","ngCookies","ui.router","mainApp"]),angular.module("dashboardApp").config(["$stateProvider","$locationProvider","$httpProvider",function($stateProvider,$locationProvider,$httpProvider){}]),angular.module("dashboardApp").run(["",function(){}]),angular.module("mainApp").controller("studentSchedulesController",["$scope","$state","student","AuthService","ngToast",function($scope,$state,student,AuthService,ngToast){$scope.schedules=[],$scope.getUpComingSchedules=function(){student.getSchedules().then(function(response){$scope.schedules=response.data.content},function(response){console.log("No upcomming schedules")})},$scope.getUpComingSchedules(),$scope.newRating={rating:0,description:""},$scope.initNewRating=function(){$scope.newRating.rating=0,$scope.newRating.description=""},$scope.schedule={},$scope.toBeConfirmed=function(schedule){$scope.schedule=schedule,$scope.confirm=!1,$scope.emptyFields=!1,$scope.initNewRating()},$scope.removeSchudlesFromTable=function(){$scope.schedules.length>0&&angular.forEach($scope.schedules,function(schedule,key){schedule._id==$scope.schedule._id&&$scope.schedules.splice(schedule,1)})},$scope.addReview=function(flag){0!==$scope.newRating.rating&&null!==$scope.tutorID&&student.giveRating($scope.tutorID,$scope.newRating.rating).then(function(response){$("#addReview").modal("hide"),ngToast.create({className:"success",content:"<span>Thanks for your review.</span>",timeout:3e3}),$scope.initNewRating()},function(response){})},$scope.confirm=!1,$scope.emptyFields=!1,$scope.confirmSchedule=function(){$scope.schedule!=={}&&0!==$scope.newRating.rating?($scope.tutorID=$scope.schedule._bookedTutor._id,student.confirmTutoring($scope.confirm,$scope.schedule._id).then(function(response){console.log("Thanks for confirming"),$("#confirmModal").modal("hide"),$scope.removeSchudlesFromTable(),$scope.addReview(),$scope.initNewRating(),ngToast.create({className:"success",content:"<p>Thanks for your confirmation</p>",timeout:6e3})},function(response){console.log("confirmation failed"),ngToast.create({className:"error",content:"<p>Failed confirm your session please try again!</p>",timeout:4e3})})):$scope.emptyFields=!0}}]),angular.module("mainApp").controller("studentDashboardController",["$scope","$state","student","AuthService","ngToast","$mdToast",function($scope,$state,student,AuthService,ngToast,$mdToast){function createFilterFor(query){var lowercaseQuery=angular.lowercase(query);return function(state){return 0===state.value.indexOf(lowercaseQuery)}}$scope.seekingHelp=[];var loadSubjects=function(){var subjects="Non-calculus integrated Physics, Calculus integrated physics, English: Elementry School, English: Middle School, English: Underclassmen, Biology: Honors and Standard, AP Biology, Chemistry: Honors and Standard, AP Chemistry, Pre-Highschool Mathamatics, Algebra, Geometry, Algebra II, Pre-Calculus, Macro-Economics, Micro-Economics, Spanish, French, Latin, Computer Science, AP Computer Science";return subjects.split(/, +/g).map(function(subject){return{value:subject.toLowerCase(),display:subject}})};$scope.searchSubjects=function(subject){var results=subject?loadSubjects().filter(createFilterFor(subject)):loadSubjects();return results},$scope.schedules=[],$scope.getUpComingSchedules=function(){student.getSchedules().then(function(response){$scope.schedules=response.data.content},function(response){console.log("No upcomming schedules")})},$scope.getUpComingSchedules();var averageRating=function(ratings){for(var sumOfRatings=0,totalRatings=ratings.length,avgRating=0,i=0;i<totalRatings;i++)sumOfRatings+=ratings[i].rating;return 0!=sumOfRatings&&(avgRating=Math.round(sumOfRatings/totalRatings)),avgRating};$scope.createTableData=function(tutors){$scope.availableTutors=[],angular.forEach(tutors,function(tutor,key){var record={};if(record._id=tutor._id,record.name=tutor.firstName+" "+tutor.lastName,record.grade=tutor.grade,record.availability=tutor.availability,record.subjects=tutor.subjects,record.email=tutor.email,tutor.ratings.length>0){var avg=averageRating(tutor.ratings);record.avgRating=avg,record.ratings=tutor.ratings}$scope.availableTutors.push(record),console.log($scope.availableTutors)})},$scope.getAvailableTutors=function(subject){subject&&subject.display&&subject.display.length>0&&($state.params={subject:subject},student.getAvailableTutors(subject.display).then(function(response){response&&response.data&&response.data.content.length>0?($scope.foundTutors=response.data.content,$scope.createTableData($scope.foundTutors)):ngToast.create({className:"warning",content:"<span>No tutors available right now for "+subject.display+"</span>",timeout:4e3})},function(error){console.log(error)}))},$scope.setReviews=function(rating,id){$scope.tutorReviews=rating,$scope.tutorID=id,$scope.initNewRating()},$scope.addRatingToTutor=function(rating){angular.forEach($scope.foundTutors,function(value,key){value._id===rating._tutorId&&value.ratings.push(rating)})},$scope.newRating={rating:0,description:""},$scope.initNewRating=function(){$scope.newRating.rating=0,$scope.newRating.description=""},$scope.addReview=function(flag){0!==$scope.newRating.rating&&null!==$scope.tutorID&&student.giveRating($scope.tutorID,$scope.newRating.rating).then(function(response){flag&&($scope.addRatingToTutor(response.data.content),$scope.createTableData($scope.foundTutors),$("#addReview").modal("hide"),ngToast.create({className:"success",content:"<span>Thanks for your review.</span>",timeout:3e3})),$scope.initNewRating()},function(response){})},$scope.updateAwaiting=function(bookedTime){$scope.availableTutors.length>0&&angular.forEach($scope.availableTutors.availability,function(value,key){value.available==bookedTime&&($scope.availableTutors.availability.isawaiting=!0)})},$scope.setBookTutor=function(index,tutor){$scope.slotTime=tutor.availability[index],$scope.bookTutor=tutor,$scope.sendRequest="",$scope.showFiledsError=!1,$scope.selectedSubject="",$scope.showAlertToGiveRating=!1,console.log($scope.bookTutor)},$scope.showBookingError=!1,$scope.sendRequest="",$scope.showFiledsError=!1,$scope.showAlertToGiveRating=!1,$scope.bookSlot=function(){return $scope.schedules.length>=3?($scope.showAlertToGiveRating=!0,!1):void(void 0!==$scope.slotTime&&$scope.bookTutor&&""!==$scope.selectedSubject&&""!==$scope.sendRequest?student.bookTutor($scope.slotTime.available,$scope.bookTutor._id,$scope.sendRequest,$scope.selectedSubject).then(function(response){$scope.updateAwaiting($scope.slotTime.available),console.log("booked"),$("#bookModal").modal("hide"),ngToast.create({className:"success",content:"<span>Email sent to "+$scope.bookTutor.email+"\n please wait until tutor confirmation.</span>",timeout:4e3})},function(response){$scope.showBookingError=!0}):$scope.showFiledsError=!0)}}]),angular.module("mainApp").controller("studentLoginController",["$scope","$state","AuthService","$cookies",function($scope,$state,AuthService,$cookies){$scope.user={email:"",password:""},$scope.showError=!1,$scope.postLogin=function(){if(""!==$scope.user.email&&""!==$scope.user.password){var url="/api/login/student";$scope.user.email=$scope.user.email.toLowerCase(),AuthService.login(url,$scope.user).then(function(response){if(response&&response.data.content){var student=response.data.content;$cookies.putObject("session",student),$state.go("dashboard.student"),$scope.showError=!1}},function(response){$scope.showError=!0})}}}]),angular.module("mainApp").controller("tutorLoginController",["$scope","$state","AuthService","$cookies",function($scope,$state,AuthService,$cookies){$scope.user={email:"",password:""},$scope.showError=!1,$scope.postLogin=function(){if(""!==$scope.user.email&&""!==$scope.user.password){var url="/api/login/tutor";$scope.user.email=$scope.user.email.toLowerCase(),AuthService.login(url,$scope.user).then(function(response){if(response&&response.data.content){var tutor=response.data.content;$cookies.putObject("session",tutor),$state.go("dashboardTutor.tutorHome")}},function(response){console.log("login faild"),$scope.showError=!0})}}}]),angular.module("mainApp").controller("studentController",["$scope","student","$state",function($scope,student,$state){$scope.registerDetails={firstname:"",lastname:"",email:"",password:"",grade:""},$scope.showSuccess=!1,$scope.showError=!1,$scope.register=function(){console.log($scope.registerDetails),null!=$scope.registerDetails.firstname&&null!=$scope.registerDetails.lastname&&($scope.registerDetails.email=$scope.registerDetails.email.toLowerCase(),student.register($scope.registerDetails).then(function(response){response&&($scope.showSuccess=!0,$state.go("app"))},function(error){409===error.data.status&&($scope.showError=!0)}))}}]),angular.module("mainApp").controller("tutorHome",["$scope","tutor",function($scope,tutor){$scope.dynamicPopover={templateUrl:"myPopoverTemplate.html"},$scope.availability=[],$scope.currentAvaialability=[],$scope.$watch("selectedDate",function(newValue,oldValue,scope){if(oldValue!==newValue){var updateavailability={};updateavailability.available=new Date(newValue).getTime(),updateavailability.isawaiting=!1,$scope.availability.push(updateavailability),console.log($scope.availability)}},!0),$scope.removeSelectedDate=function(index){$scope.availability.splice(index,1)},$scope.getCurrentAvailability=function(){tutor.getAvailability().then(function(response){$scope.currentAvaialability=response.data.content,console.log($scope.currentAvaialability)},function(response){})},$scope.getCurrentAvailability();var addToCurrentAvailability=function(){angular.forEach($scope.availability,function(value,key){$scope.currentAvaialability.push(value)}),$scope.availability=[]};$scope.setAvailabilityToRemove=function(slotTime){$scope.slotTime=slotTime},$scope.removeAvailability=function(){$scope.slotTime&&tutor.removeAvailability($scope.slotTime.available).then(function(response){response&&(angular.forEach($scope.currentAvaialability,function(value,key){value.available==$scope.slotTime.available&&$scope.currentAvaialability.splice(key,1)}),$("#removeAvailability").modal("hide"),console.log("removed availability successfully"))},function(response){})},$scope.postAvailability=function(){$scope.availability.length>0&&tutor.updateAvailability($scope.availability).then(function(response){addToCurrentAvailability()},function(response){console.log("error while updating")})}}]),angular.module("mainApp").controller("tutorSchedulesController",["$scope","$state","tutor",function($scope,$state,tutor){$scope.dynamicPopover={templateUrl:"myPopoverTemplate.html"},$scope.schedulesToConfirm=[],$scope.getSchudulesToBeConfrim=function(){tutor.getSchedulesToConfirm().then(function(response){response&&response.data&&response.data.content.length>0&&($scope.schedulesToConfirm=response.data.content)},function(response){console.log("getting schedules failed")})},$scope.getSchudulesToBeConfrim(),$scope.tutorUpcommingSchudles=[],$scope.getUpComingTutorSchedules=function(){tutor.getSchedules().then(function(response){$scope.tutorUpcommingSchudles=response.data.content},function(response){console("No upcomming schedules")})},$scope.getUpComingTutorSchedules(),$scope.setScheduleToConfirm=function(schedule){$scope.schedule=schedule},$scope.confirmOrRejectSchedule=function(confirm,reject){if(void 0!==$scope.schedule){var name=$scope.schedule._bookedBy.firstName+" "+$scope.schedule._bookedBy.lastName;tutor.confirmOrReject($scope.schedule._id,confirm,reject,name,$scope.schedule._bookedBy.email).then(function(response){console.log("thanks for confirming");var index=$scope.schedulesToConfirm.indexOf($scope.schedule);$scope.schedulesToConfirm.splice(index,1)},function(response){})}}}]),angular.module("mainApp").controller("tutorDashboardController",["$scope","$state","AuthService","$cookies",function($scope,$state,AuthService,$cookies){$scope.displayName=AuthService.getNameToDisplay(),$scope.logout=function(){$cookies.remove("session"),window.location.href="/"},$scope.oldPasswordCheck=!1,$scope.violationCheck,$scope.passCheck=function(value){var element=$("#newPassword1");value?value.match(/[a-z]/)&&(value.match(/[A-Z]/)||value.match(/\d/))&&value.length>=8?(element.removeClass("error").addClass("validClass"),$scope.violationCheck=!1):(element.removeClass("validClass").addClass("error"),$scope.violationCheck=!0):element.removeClass("validClass")},$scope.$watch("newpass2",function(newValue,oldValue){newValue&&null!=newValue&&null!=$scope.newpass1?($scope.pwcheck=newValue===$scope.newpass1,$scope.changePasswordForm.$setValidity("pwmatch",$scope.pwcheck),$scope.pwcheck?$("#newPassword2").removeClass("error").addClass("validClass"):$("#newPassword2").addClass("error").removeClass("validClass")):($("#newPassword2").removeClass("validClass error"),$scope.changePasswordForm.$setValidity("pwmatch",!0))}),$scope.changePassword=function(){if(null==$scope.newpass1||null==$scope.newpass2||null==$scope.oldpass)return $("#oldPassword").addClass("error"),$("#newPassword1").addClass("error"),void $("#newPassword2").addClass("error");if(1==!$scope.violationCheck){var url="/tutor/changePassword";AuthService.updatePassword(url,$scope.oldpass,$scope.newpass1).then(function(data){$("#changePassword").modal("hide"),alert("Please login with new password"),$scope.logout(),$scope.clearFields()},function(data){console.log(data),$scope.oldPasswordCheck=!0,$("#oldPassword").removeClass("validClass").addClass("error")})}},$scope.clearFields=function(){$scope.newpass1="",$scope.newpass2="",$scope.oldpass="",$scope.violationCheck=!1,$scope.oldPasswordCheck=!1,$("#newPassword1").removeClass("validClass").removeClass("error"),$("#oldPassword").removeClass("validClass").removeClass("error")}}]),angular.module("mainApp").controller("tutorController",["$scope","tutor","$state",function($scope,tutor,$state){$scope.tutorRegistationDetails={firstname:"",lastname:"",email:"",password:"",grade:"",subjects:[],availability:[]},$scope.customAvailability=[],$scope.showError=!1,$scope.showEmptyError=!1,$scope.$watch("selectedDate",function(newValue,oldValue,scope){if(oldValue!==newValue){var updateavailability={};updateavailability.available=new Date(newValue).getTime(),updateavailability.isawaiting=!1,$scope.tutorRegistationDetails.availability.push(updateavailability),console.log($scope.tutorRegistationDetails.availability)}},!0),$scope.removeSelectedDate=function(index){$scope.tutorRegistationDetails.availability.splice(index,1)},$scope.submitRegistration=function(){console.log($scope.tutorRegistationDetails),""!==$scope.tutorRegistationDetails.firstname&&""!==$scope.tutorRegistationDetails.lastname&&""!==$scope.tutorRegistationDetails.email&&""!==$scope.tutorRegistationDetails.password&&""!==$scope.tutorRegistationDetails.grade&&$scope.tutorRegistationDetails.subjects.length>0&&$scope.tutorRegistationDetails.availability.length>0?($scope.tutorRegistationDetails.email=$scope.tutorRegistationDetails.email.toLowerCase(),tutor.register($scope.tutorRegistationDetails).then(function(response){console.log(response),$state.go("app")},function(responsse){409===error.data.status&&($scope.showError=!0)})):$scope.showEmptyError=!0}}]);